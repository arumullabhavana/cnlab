#include <stdio.h>
struct node {
    unsigned dist[20];
    unsigned from[20];
} rt[10];

int main() {
    int dmat[20][20];
    int n, i, j, k, count;
    // Input number of nodes
    printf("Enter the number of nodes: ");
    scanf("%d", &n);
    // Input the cost matrix
    printf("Enter the cost matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &dmat[i][j]);
            if (i == j) {
                dmat[i][j] = 0; // Distance to self is 0
            }
            rt[i].dist[j] = dmat[i][j]; // Initialize distance
            rt[i].from[j] = j; // Initialize next hop
        }
    }
    // Distance vector algorithm
    do {
        count = 0;
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                for (k = 0; k < n; k++) {
                    if (rt[i].dist[j] > dmat[i][k] + rt[k].dist[j]) {
                        rt[i].dist[j] = dmat[i][k] + rt[k].dist[j];
                        rt[i].from[j] = k;
                        count++;
                    }
                }
 }
        }
    } while (count != 0);
    // Output the routing information
    for (i = 0; i < n; i++) {
        printf("\n\nState value for router %d is:\n", i + 1);
        for (j = 0; j < n; j++) {
            printf("Node %d via %d Distance %d\n", j + 1, rt[i].from[j] + 1, rt[i].dist[j]);
        }
    }
    return 0;
}



Output:
Enter the number of nodes: 3
Enter the cost matrix:
0 2 99
1 0 99
3 2 0

State value for router 1 is:
Node 1 via 1 Distance 0
Node 2 via 2 Distance 2
Node 3 via 3 Distance 99

State value for router 2 is:
Node 1 via 1 Distance 1
Node 2 via 2 Distance 0
Node 3 via 3 Distance 99

State value for router 3 is:
Node 1 via 1 Distance 3
Node 2 via 2 Distance 2
Node 3 via 3 Distance 0
